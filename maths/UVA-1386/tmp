struct Matrix {
    ll s[500][500];
    int n;
    ll& operator() (int x, int y) {
        return s[x][y];
    }
    ll* operator[] (int x) {
        return s[x];
    }
    Matrix(int _n, int i=0) {
        mmst(s, 0);
        n = _n;
        if(i) For(j,n) s[j][j]=i;
    }

    Matrix operator* (const Matrix &b) const {
        Matrix c = Matrix(n);
        For(i,n){
            For(k,n){
                ll t=s[i][k];
                For(j,n){
                    c.s[i][j] += t * b.s[k][j];
                    realmod(c.s[i][j]);
                }
            }
        }
        return c;
    }

    Matrix operator+ (const Matrix &b) const {
        Matrix c = Matrix(n);
        For(i,n){
            For(j,n){
                c[i][j] = s[i][j] + b.s[i][j];
            }
        }
        return c;
    }

    Matrix operator- (const Matrix &b) const {
        Matrix c = Matrix(n);
        For(i,n){
            For(j,n){
                c[i][j] = s[i][j] - b.s[i][j];
            }
        }
        return c;
    }

    Matrix quick_pow(int b) {
        Matrix c = Matrix(n, 1);
        Matrix a = (*this);
        for(; b; b>>=1) {
            if (b & 1) c = c * a;
            a = a * a;
        }
        return c;
    }

    void init(int d) {
        For(i, n){
            rep(j, -d, d) {
                s[i][(i+j+n) % n] = 1;
            }
        }
    }

    void output() {
        For(i,n){
            For(j,n){
                cout << s[i][j] << " ";
            }
            cout << endl;
        }
    }
};
